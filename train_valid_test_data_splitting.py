# -*- coding: utf-8 -*-
"""train-valid-test data splitting.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gBzk21BBsPb22sKQ2EIitI2meZThXPZq
"""

from sklearn import datasets
import pandas as pd
import numpy as np

iris=datasets.load_iris()

iris

iris.keys()

iris=pd.DataFrame(data=np.c_[iris['data'],iris['target']],columns=iris['feature_names']+['target'])

species=[]
for i in range(len(iris['target'])):
    if iris['target'][i]==0:
        species.append('setosa')
    elif iris['target'][i]==1:
        species.append('versicolor')
    elif iris['target'][i]==2:
        species.append('verginica')

iris['species']=species

iris

from sklearn.model_selection import train_test_split
x=iris.drop(['target','species'],axis=1)
y=iris['target']

x

y

x_train,x_valid_test,y_train,y_valid_test=train_test_split(x,y,test_size=0.3)

x_valid,x_test,y_valid,y_test=train_test_split(x_valid_test,y_valid_test,test_size=0.5)

print(len(x_train),len(x_valid),len(x_test))

from sklearn.linear_model import LogisticRegression
logmodel=LogisticRegression()

logmodel.fit(x_train,y_train)

val=logmodel.predict(x_valid)

val

valiid_prediction=logmodel.predict(x_valid)

valiid_prediction

training_prediction=logmodel.predict(x_train)

training_prediction

testing_prediction=logmodel.predict(x_test)

testing_prediction

from sklearn.metrics import classification_report, confusion_matrix

#performance analysis for training data
print(classification_report(y_train,training_prediction))
#performance analysis for validation data
print(classification_report(y_valid,valiid_prediction))
#performance analysis for testing data
print(classification_report(y_test,testing_prediction))

#performance analysis for training data
print(confusion_matrix(y_train,training_prediction))
#performance analysis for validation data
print(confusion_matrix(y_valid,valiid_prediction))
#performance analysis for testing data
print(confusion_matrix(y_test,testing_prediction))

